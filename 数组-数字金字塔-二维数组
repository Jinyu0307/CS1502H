#include <iostream>
#include <vector>
using namespace std;

int maxPathSum(vector<vector<int>> &nums, int row, int col) {
    int sum = 0;
    if (col == 0 || col == row + 1) {
        return 0;
    }

    return nums[row][col] + max(maxPathSum(nums, row - 1, col -1), maxPathSum(nums, row - 1, col));
}

int main()
{
    vector<vector<int>> nums;
    int n;

    cin >> n;

    for (int i = 0; i <= n; ++i) {
        vector<int> ivec;
        ivec.push_back(0);
        for (int j = 1; j <= i; ++j) {
            int tmp;
            cin >> tmp;
            ivec.push_back(tmp);
        }
        ivec.push_back(0);
        nums.push_back(ivec);
    } 

    int maxSum = 0;
    for (int i = 1; i <= n; ++i) {
        maxSum = max(maxSum, maxPathSum(nums, n, i));
    }
    cout << maxSum;
    
    return 0;
}
